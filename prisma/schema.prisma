// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime            @default(now())  @map("created_at")
  updatedAt DateTime            @updatedAt       @map("updated_at")

  @@map("users")
}

model Account {
  id                String     @id @default(cuid())
  userId            String     @map("user_id")
  type              String
  provider          String
  providerAccountId String     @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime            @default(now())  @map("created_at")
  updatedAt DateTime            @updatedAt       @map("updated_at")

  user User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String     @id @default(cuid())
  sessionToken String     @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime      @default(now())   @map("created_at")
  updatedAt DateTime      @updatedAt        @map("updated_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String   @unique @map("credential_id")
  userId               String
  providerAccountId    String   @map("provider_account_id")
  credentialPublicKey  String   @map("credential_public_key")
  counter              Int
  credentialDeviceType String   @map("credential_device_type")
  credentialBackedUp   Boolean  @map("credential_backed_up")
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}
